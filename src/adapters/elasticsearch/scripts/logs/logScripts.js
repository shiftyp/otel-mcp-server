"use strict";
/**
 * Painless scripts for log-related Elasticsearch queries
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractFirstLineErrorMessage = exports.extractServiceName = exports.extractErrorMessage = void 0;
/**
 * Script to extract error message from log data
 * Handles multiple field formats and extracts the most relevant error message
 */
exports.extractErrorMessage = "\n// Access the full source document\ndef source = doc['_source'];\n\n// Try to extract error message from various fields in priority order\n\n// OTEL mapping mode fields\n// 1. Check attributes.exception fields\nif (source.containsKey('attributes') && source.attributes instanceof Map) {\n  def attrs = source.attributes;\n  \n  // Check for exception in attributes\n  if (attrs.containsKey('exception') && attrs.exception instanceof Map && attrs.exception.containsKey('message')) {\n    emit(attrs.exception.message.toString());\n    return;\n  }\n  \n  // Check for error in attributes\n  if (attrs.containsKey('error') && attrs.error instanceof Map && attrs.error.containsKey('message')) {\n    emit(attrs.error.message.toString());\n    return;\n  }\n  \n  // Check for message in attributes\n  if (attrs.containsKey('message')) {\n    emit(attrs.message.toString());\n    return;\n  }\n}\n\n// 2. Check body field (OTEL format)\nif (source.containsKey('body')) {\n  def body = source.body;\n  if (body instanceof String || body instanceof GString) {\n    // Extract first line or up to 100 chars\n    def bodyStr = body.toString();\n    def firstLine = bodyStr.indexOf('\\n') > 0 ? \n      bodyStr.substring(0, bodyStr.indexOf('\\n')) : \n      (bodyStr.length() > 100 ? bodyStr.substring(0, 100) + '...' : bodyStr);\n    emit(firstLine);\n    return;\n  }\n}\n\n// ECS mapping mode fields\n// 3. Exception fields\nif (source.containsKey('exception')) {\n  def exception = source.exception;\n  if (exception instanceof Map && exception.containsKey('message')) {\n    emit(exception.message.toString());\n    return;\n  }\n}\n\n// 4. Error fields\nif (source.containsKey('error')) {\n  def error = source.error;\n  if (error instanceof Map && error.containsKey('message')) {\n    emit(error.message.toString());\n    return;\n  } else if (error instanceof String || error instanceof GString) {\n    emit(error.toString());\n    return;\n  }\n}\n\n// 5. Message fields\nif (source.containsKey('message')) {\n  emit(source.message.toString());\n  return;\n}\n\n// 6. Body fields (often used in k8s events)\nif (source.containsKey('Body')) {\n  def body = source.Body;\n  if (body instanceof String || body instanceof GString) {\n    // Extract first line or up to 100 chars\n    def bodyStr = body.toString();\n    def firstLine = bodyStr.indexOf('\\n') > 0 ? \n      bodyStr.substring(0, bodyStr.indexOf('\\n')) : \n      (bodyStr.length() > 100 ? bodyStr.substring(0, 100) + '...' : bodyStr);\n    emit(firstLine);\n    return;\n  } else if (body instanceof Map) {\n    // Try to extract message from k8s event\n    if (body.containsKey('message')) {\n      emit(body.message.toString());\n      return;\n    }\n  }\n}\n\n// If we get here, we couldn't find a suitable error message\nemit(\"Unknown error\");\n";
/**
 * Script to extract service name from log data
 */
exports.extractServiceName = "\ndef source = doc['_source'];\n\n// Try to extract service name from various fields\nif (source.containsKey('Resource') && source.Resource instanceof Map && \n    source.Resource.containsKey('service') && source.Resource.service instanceof Map && \n    source.Resource.service.containsKey('name')) {\n  emit(source.Resource.service.name.toString());\n  return;\n}\n\nif (source.containsKey('resource') && source.resource instanceof Map && \n    source.resource.containsKey('service') && source.resource.service instanceof Map && \n    source.resource.service.containsKey('name')) {\n  emit(source.resource.service.name.toString());\n  return;\n}\n\nif (source.containsKey('service') && source.service instanceof Map && \n    source.service.containsKey('name')) {\n  emit(source.service.name.toString());\n  return;\n}\n\nemit(\"unknown\");\n";
/**
 * Script to extract the first line of an error message from log data
 */
exports.extractFirstLineErrorMessage = "\n// Try to extract the first line of any error message from various fields\nString errorMsg = \"\";\n\n// Check body.text (OTEL format)\nif (doc.containsKey(\"body.text\") && doc[\"body.text\"].size() > 0) {\n  errorMsg = doc[\"body.text\"].value;\n}\n// Check Body.text (ECS format)\nelse if (doc.containsKey(\"Body.text\") && doc[\"Body.text\"].size() > 0) {\n  errorMsg = doc[\"Body.text\"].value;\n}\n// Check message field\nelse if (doc.containsKey(\"message\") && doc[\"message\"].size() > 0) {\n  errorMsg = doc[\"message\"].value;\n}\n// Check attributes.message field\nelse if (doc.containsKey(\"attributes.message\") && doc[\"attributes.message\"].size() > 0) {\n  errorMsg = doc[\"attributes.message\"].value;\n}\n// Check exception message\nelse if (doc.containsKey(\"attributes.exception.message\") && doc[\"attributes.exception.message\"].size() > 0) {\n  errorMsg = doc[\"attributes.exception.message\"].value;\n}\n\n// Extract first line or truncate if too long\nif (errorMsg.length() > 0) {\n  int newlineIndex = errorMsg.indexOf(\"\\n\");\n  if (newlineIndex > 0) {\n    errorMsg = errorMsg.substring(0, newlineIndex);\n  }\n  \n  // Truncate if too long\n  if (errorMsg.length() > 200) {\n    errorMsg = errorMsg.substring(0, 200) + \"...\";\n  }\n  \n  emit(errorMsg);\n} else {\n  emit(\"Unknown error\");\n}\n";
